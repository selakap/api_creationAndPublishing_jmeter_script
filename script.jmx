<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">800</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer eyJ4NXQiOiJNell4TW1Ga09HWXdNV0kwWldObU5EY3hOR1l3WW1NNFpUQTNNV0kyTkRBelpHUXpOR00wWkdSbE5qSmtPREZrWkRSaU9URmtNV0ZoTXpVMlpHVmxOZyIsImtpZCI6Ik16WXhNbUZrT0dZd01XSTBaV05tTkRjeE5HWXdZbU00WlRBM01XSTJOREF6WkdRek5HTTBaR1JsTmpKa09ERmtaRFJpT1RGa01XRmhNelUyWkdWbE5nX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhZG1pbiIsImF1dCI6IkFQUExJQ0FUSU9OX1VTRVIiLCJhdWQiOiJ5M0VVbEJxTmlzZmFqUWphWDBDSWxKTzRXWVlhIiwibmJmIjoxNjM2NzAzMjcwLCJhenAiOiJ5M0VVbEJxTmlzZmFqUWphWDBDSWxKTzRXWVlhIiwic2NvcGUiOiJhcGltOmFwaV9jcmVhdGUgYXBpbTphcGlfaW1wb3J0X2V4cG9ydCBhcGltOmFwaV9wdWJsaXNoIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo5NDQzXC9vYXV0aDJcL3Rva2VuIiwiZXhwIjoxNjM2NzA2ODcwLCJpYXQiOjE2MzY3MDMyNzAsImp0aSI6IjYzMTU5NzE4LWI3M2EtNDI1NS04ZTQ0LTQyNzkzODFhZTNlZiJ9.uk-KqAYCAAYfIDAsaOsdCBrURCI7SwO2mWIbVnofHeaisL7XevoGKRSBTKaZm6l2MU-K7E3IT8Ob0Vew3XzA5uwzJ9YxfJvQErcFcPJk-HH09iDV3U3Yl2r3eKJZG9quSBJfyx0YzS2Uf9PPNIy9lqWjSFOh20PD4ZEDt3LEziMvQGbpQQ8AJvVONNAdrDp69ozXG9t_UcK0mDGrpT-_MWvP150inko2prz444WqNTpqKiEgGQYdAKh5T7P7dJtDB5fOisQPpapnRO3_hsMo1tsmxI5CCPTbNEKN4yngrijB9v1kni1qm7HvnxIYPZtNYX0ODHSwIR95UzxBvEdqIQ</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="create" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;ccc${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}&quot;,&#xd;
  &quot;description&quot;: &quot;This is a simple API for Pizza Shack online pizza delivery store.&quot;,&#xd;
  &quot;context&quot;: &quot;ccc${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}&quot;,&#xd;
  &quot;version&quot;: &quot;${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}${__Random(0,9)}&quot;,&#xd;
  &quot;provider&quot;: &quot;admin&quot;,&#xd;
  &quot;lifeCycleStatus&quot;: &quot;PUBLISHED&quot;,&#xd;
  &quot;wsdlInfo&quot;: {&#xd;
    &quot;type&quot;: &quot;WSDL&quot;&#xd;
  },&#xd;
  &quot;responseCachingEnabled&quot;: true,&#xd;
  &quot;cacheTimeout&quot;: 300,&#xd;
  &quot;destinationStatsEnabled&quot;: &quot;Disabled&quot;,&#xd;
  &quot;hasThumbnail&quot;: false,&#xd;
  &quot;isDefaultVersion&quot;: false,&#xd;
  &quot;enableSchemaValidation&quot;: false,&#xd;
  &quot;enableStore&quot;: true,&#xd;
  &quot;type&quot;: &quot;HTTP&quot;,&#xd;
  &quot;transport&quot;: [&#xd;
    &quot;http&quot;,&#xd;
    &quot;https&quot;&#xd;
  ],&#xd;
  &quot;tags&quot;: [&#xd;
    &quot;pizza&quot;,&#xd;
    &quot;food&quot;&#xd;
  ],&#xd;
  &quot;policies&quot;: [&#xd;
    &quot;Unlimited&quot;&#xd;
  ],&#xd;
  &quot;apiThrottlingPolicy&quot;: &quot;Unlimited&quot;,&#xd;
  &quot;authorizationHeader&quot;: &quot;Authorization&quot;,&#xd;
  &quot;securityScheme&quot;: [&#xd;
    &quot;oauth2&quot;&#xd;
  ],&#xd;
  &quot;maxTps&quot;: {&#xd;
    &quot;production&quot;: 1000,&#xd;
    &quot;sandbox&quot;: 1000&#xd;
  },&#xd;
  &quot;visibility&quot;: &quot;PUBLIC&quot;,&#xd;
  &quot;visibleRoles&quot;: [],&#xd;
  &quot;visibleTenants&quot;: [],&#xd;
  &quot;endpointSecurity&quot;: {&#xd;
    &quot;type&quot;: &quot;BASIC&quot;,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;password&quot;&#xd;
  },&#xd;
  &quot;gatewayEnvironments&quot;: [&#xd;
    &quot;Production and Sandbox&quot;&#xd;
  ],&#xd;
  &quot;deploymentEnvironments&quot;: [&#xd;
    {&#xd;
      &quot;type&quot;: &quot;Kubernetes&quot;,&#xd;
      &quot;clusterName&quot;: [&#xd;
        &quot;minikube&quot;&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;labels&quot;: [],&#xd;
  &quot;mediationPolicies&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;json_to_xml_in_message&quot;,&#xd;
      &quot;type&quot;: &quot;in&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;xml_to_json_out_message&quot;,&#xd;
      &quot;type&quot;: &quot;out&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;json_fault&quot;,&#xd;
      &quot;type&quot;: &quot;fault&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;subscriptionAvailability&quot;: &quot;CURRENT_TENANT&quot;,&#xd;
  &quot;subscriptionAvailableTenants&quot;: [],&#xd;
  &quot;additionalProperties&quot;: {&#xd;
    &quot;property1&quot;: &quot;string&quot;,&#xd;
    &quot;property2&quot;: &quot;string&quot;&#xd;
  },&#xd;
  &quot;monetization&quot;: {&#xd;
    &quot;enabled&quot;: true,&#xd;
    &quot;properties&quot;: {&#xd;
      &quot;property1&quot;: &quot;string&quot;,&#xd;
      &quot;property2&quot;: &quot;string&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;accessControl&quot;: &quot;NONE&quot;,&#xd;
  &quot;accessControlRoles&quot;: [],&#xd;
  &quot;businessInformation&quot;: {&#xd;
    &quot;businessOwner&quot;: &quot;businessowner&quot;,&#xd;
    &quot;businessOwnerEmail&quot;: &quot;businessowner@wso2.com&quot;,&#xd;
    &quot;technicalOwner&quot;: &quot;technicalowner&quot;,&#xd;
    &quot;technicalOwnerEmail&quot;: &quot;technicalowner@wso2.com&quot;&#xd;
  },&#xd;
  &quot;corsConfiguration&quot;: {&#xd;
    &quot;corsConfigurationEnabled&quot;: false,&#xd;
    &quot;accessControlAllowOrigins&quot;: [&#xd;
      &quot;string&quot;&#xd;
    ],&#xd;
    &quot;accessControlAllowCredentials&quot;: false,&#xd;
    &quot;accessControlAllowHeaders&quot;: [&#xd;
      &quot;string&quot;&#xd;
    ],&#xd;
    &quot;accessControlAllowMethods&quot;: [&#xd;
      &quot;string&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;workflowStatus&quot;: &quot;APPROVED&quot;,&#xd;
  &quot;createdTime&quot;: &quot;2021-11-10T11:01:31.704Z&quot;,&#xd;
  &quot;lastUpdatedTime&quot;: &quot;2021-11-10T11:01:31.704Z&quot;,&#xd;
  &quot;endpointConfig&quot;: {&#xd;
    &quot;endpoint_type&quot;: &quot;http&quot;,&#xd;
    &quot;sandbox_endpoints&quot;: {&#xd;
      &quot;url&quot;: &quot;https://localhost:9443/am/sample/pizzashack/v1/api/&quot;&#xd;
    },&#xd;
    &quot;production_endpoints&quot;: {&#xd;
      &quot;url&quot;: &quot;https://localhost:9443/am/sample/pizzashack/v1/api/&quot;&#xd;
    },&#xd;
    &quot;endpoint_security&quot;: {&#xd;
      &quot;sandbox&quot;: {&#xd;
        &quot;password&quot;: null,&#xd;
        &quot;tokenUrl&quot;: &quot;http://localhost:9443/token&quot;,&#xd;
        &quot;clientId&quot;: &quot;cid123&quot;,&#xd;
        &quot;clientSecret&quot;: &quot;cs123&quot;,&#xd;
        &quot;customParameters&quot;: {},&#xd;
        &quot;type&quot;: &quot;OAUTH&quot;,&#xd;
        &quot;grantType&quot;: &quot;CLIENT_CREDENTIALS&quot;,&#xd;
        &quot;enabled&quot;: true,&#xd;
        &quot;username&quot;: null&#xd;
      },&#xd;
      &quot;production&quot;: {&#xd;
        &quot;password&quot;: null,&#xd;
        &quot;tokenUrl&quot;: &quot;http://localhost:9443/token&quot;,&#xd;
        &quot;clientId&quot;: &quot;cid123&quot;,&#xd;
        &quot;clientSecret&quot;: &quot;cs123&quot;,&#xd;
        &quot;customParameters&quot;: {},&#xd;
        &quot;type&quot;: &quot;OAUTH&quot;,&#xd;
        &quot;grantType&quot;: &quot;CLIENT_CREDENTIALS&quot;,&#xd;
        &quot;enabled&quot;: true,&#xd;
        &quot;username&quot;: null&#xd;
      }&#xd;
    }&#xd;
  },&#xd;
  &quot;endpointImplementationType&quot;: &quot;INLINE&quot;,&#xd;
  &quot;scopes&quot;: [&#xd;
    {&#xd;
      &quot;scope&quot;: {&#xd;
        &quot;name&quot;: &quot;apim:api_view&quot;,&#xd;
        &quot;displayName&quot;: &quot;api_view&quot;,&#xd;
        &quot;description&quot;: &quot;This Scope can used to view Apis&quot;,&#xd;
        &quot;bindings&quot;: [&#xd;
          &quot;admin&quot;,&#xd;
          &quot;Internal/creator&quot;,&#xd;
          &quot;Internal/publisher&quot;&#xd;
        ]&#xd;
      },&#xd;
      &quot;shared&quot;: true&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;target&quot;: &quot;/order/{orderId}&quot;,&#xd;
      &quot;verb&quot;: &quot;POST&quot;,&#xd;
      &quot;authType&quot;: &quot;Application &amp; Application User&quot;,&#xd;
      &quot;throttlingPolicy&quot;: &quot;Unlimited&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;target&quot;: &quot;/menu&quot;,&#xd;
      &quot;verb&quot;: &quot;GET&quot;,&#xd;
      &quot;authType&quot;: &quot;Application &amp; Application User&quot;,&#xd;
      &quot;throttlingPolicy&quot;: &quot;Unlimited&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;threatProtectionPolicies&quot;: {&#xd;
    &quot;list&quot;: [&#xd;
      {&#xd;
        &quot;policyId&quot;: &quot;string&quot;,&#xd;
        &quot;priority&quot;: 0&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;categories&quot;: []&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/am/publisher/v1/apis</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">/oauth2/token</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regex Extractor - api Id" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">api</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$$2$$3$$4$$5$$6$</stringProp>
            <stringProp name="RegexExtractor.default">FALSE</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lifecycle" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/am/publisher/v1/apis/change-lifecycle?apiId=${api_g1}&amp;action=Publish</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">/oauth2/token</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
